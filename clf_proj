AWSTemplateFormatVersion: 2010-09-09

Description:  this template creates a cloud formation template that will raise vpc with 6 subnets3 public /23
3 private /18 with 2 subnets in each AZ, also an ipv6 network must be allocated in each subnet
-NAT gateway (for private subnets)
Egress only internet gateway (for private subnets)
Internet gateway (for public subnets)

# Parameters are used to to build flexible CloudFormation templates
Parameters:
  VpcCIDR:
    Default: 10.0.0.0/24
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String

  PublicSubnet1CIDR:
    Default: 10.0.0.0/23
    Description: Please enter the IP range (CIDR notation) for the public subnet 1
    Type: String

  PublicSubnet2CIDR:
    Default: 10.0.1.0/23
    Description: Please enter the IP range (CIDR notation) for the public subnet 2
    Type: String

  PublicSubnet3CIDR:
    Default: 10.0.2.0/23
    Description: Please enter the IP range (CIDR notation) for the public subnet 3
    Type: String


  PrivateSubnet1CIDR:
    Default: 10.0.2.0/18
    Description: Please enter the IP range (CIDR notation) for the private subnet 1
    Type: String

  PrivateSubnet2CIDR:
    Default: 10.0.3.0/18
    Description: Please enter the IP range (CIDR notation) for the private subnet 2
    Type: String

  PrivateSubnet3CIDR:
    Default: 10.0.4.0/18
    Description: Please enter the IP range (CIDR notation) for the private subnet 3
    Type: String


Resources:
# Create VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Test VPC

# Create Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Test IGW

# Attach Internet Gateway to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

# Create Public Subnet1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1
      VpcId: !Ref VPC

# Create Public Subnet2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 2
      VpcId: !Ref VPC

# Create Public Subnet3
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 3
      VpcId: !Ref VPC

# Create Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Public Route Table
      VpcId: !Ref VPC

# Add a Public Route to the Route Table
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

# Associate Public Subnet1 with Public Route Table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

# Associate Public Subnet2 with Public Route Table
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

# Associate Public Subnet3 with Public Route Table
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

# Create Private Subnet1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 1 
      VpcId: !Ref VPC

# Create Private Subnet2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 2 
      VpcId: !Ref VPC

# Create Private Subnet3
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 3 
      VpcId: !Ref VPC


#NATGATEWAYEIP1
  NatPrivateIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
         -Key: name
         Value: EIP 1

     
#NATGATEWAYEIP2
  NatPrivateIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
         -Key: name
         Value: EIP 2

#NATEGATEWAYEIP3
  NatPrivateIP3:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
         -Key: name
         Value: EIP 3           

#NATGATEWAY1
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatPrivateIP1.AllocationId    
      SubnetId: !Ref PrivateSubnet1
        Tags:
           -Key: name
          Value: Nat gateway private Subnet1

#NATGATEWAY2
  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NatPrivateIP2.AllocationId
      SubnetId: !Ref PrivateSubnet2
        Tags:
           -Key: name
          Value: Nat gateway private Subnet2
    
#NATGATEWAY3   
  NatGateway3:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NatPrivateIP3.AllocationId
      SubnetId: !Ref PrivateSubnet3
        Tags:
           -Key: name
          Value: Nat gateway private Subnet3

#EGW1
 EgressOnlyInternetGateway: 
    Type: AWS::EC2::EgressOnlyInternetGateway
    Properties:
      SubnetId: !Ref PrivateSubnet1
        Tags:
           -Key: name
          Value: egw private subnet1
        VpcId: !Ref VPC     

#EGW2
 EgressOnlyInternetGateway: 
    Type: AWS::EC2::EgressOnlyInternetGateway
    Properties:
      SubnetId: !Ref PrivateSubnet2
        Tags:
           -Key: name
          Value: egw private subnet2
        VpcId: !Ref VPC     

#EGW3
 EgressOnlyInternetGateway: 
    Type: AWS::EC2::EgressOnlyInternetGateway
    Properties:
      SubnetId: !Ref PrivateSubnet3
        Tags:
           -Key: name
          Value: egw private subnet3
        VpcId: !Ref VPC     

#PRIVATE ROUTING
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      
  NATPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0

  EGWPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      EGWId: !Ref EgressOnlyInternetGateway
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
           

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
     
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable
